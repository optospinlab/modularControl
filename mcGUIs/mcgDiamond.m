classdef mcgDiamond < mcGUI
    % Template to explain how to make a custom mcGUI (unfinished).
    
    properties
        objects = []
    end
    
    methods (Static)
        function config = defaultConfig()
            config = mcgDiamond.diamondConfig();
        end
        function config = diamondConfig()
            galvoConfig = mcaDAQ.galvoConfig();
            piezoConfig = mcaDAQ.piezoConfig();
            
            %                     Style     String              Variable    TooltipString                                                                       Optional: Limit [min max round] (only for edit)
            config.controls = { { 'push',   'Open mcData',      'open',     'Operates the same way as the open button on an mcDataViewer window...' },...
                                { 'title',  'Galvos:  ',        NaN,        'Confocal scanning for the galvo mirrors.' },...
                                { 'edit',   'Range (mV): ',     200,        'The range of the scan (in X and Y), centered on the current position. If this scan goes out of bounds, it is shifted to be in bounds.',                                        [0 abs(diff(galvoConfig.kind.int2extConv(galvoConfig.kind.intRange)))]},...
                                { 'edit',   'Pixels (#): ',     50,         'The number of points (in each dimension) which should be sampled over the scan range.',                                                                                        [1 Inf 1]},...
                                { 'edit',   'Speed (mV/s): ',   200,        'The time taken for an optimization. The speed in this case will be [range/time].',   [0 Inf]},...
                                { 'push',   'Galvo Scan',       'galvo',    'Push to active a scan with the above parameters.' },...
                                { 'title',  'Piezos: ',         NaN,        'Confocal scanning and optimization for the piezos.' },...
                                { 'edit',   'Range (um): ',     50,         'The range of the scan (in X and Y), centered on the current position. If this scan goes out of bounds, it is shifted to be in bounds.',                                        [0 abs(diff(piezoConfig.kind.int2extConv(piezoConfig.kind.intRange)))]},...
                                { 'edit',   'Pixels (#): ',     50,         'The number of points (in each dimension) which should be sampled over the scan range.',                                                                                        [1 Inf 1]},...
                                { 'edit',   'Speed (um/s): ',   50,         'The speed at which the range should be scanned over. Each scan will take [range/speed] seconds and [range/(speed*pixels)] seconds will be spent at each point of the scan.',   [0 Inf]},...
                                { 'push',   'Piezo Scan',       'piezo',    'Push to active a scan with the above parameters.' },...
                                { 'edit',   'Range XY (um): ',  1,          'The range of the scan (in X or Y), centered on the current position. If this scan goes out of bounds, it is shifted to be in bounds.',                                         [0 abs(diff(piezoConfig.kind.int2extConv(piezoConfig.kind.intRange)))]},...
                                { 'edit',   'Range Z (um): ',   5,          'The range of the scan (in Z), centered on the current position. If this scan goes out of bounds, it is shifted to be in bounds.',                                              [0 abs(diff(piezoConfig.kind.int2extConv(piezoConfig.kind.intRange)))]},...
                                { 'edit',   'Pixels (#): ',     50,         'The number of points which should be sampled over the scan range.',                                                                                                            [1 Inf 1]},...
                                { 'edit',   'Time (s): ',       2,          'The time taken for an optimization. The speed in this case will be [range/time].',   [0 Inf]},...
                                { 'push',   'Optimize X',      'optX',      'Push to active an optimization in the X direction with the above parameters.' },...
                                { 'push',   'Optimize Y',      'optY',      'Push to active an optimization in the Y direction with the above parameters.' },...
                                { 'push',   'Optimize Z',      'optZ',      'Push to active an optimization in the Z direction with the above parameters.' },...
                                { 'title',  'Spectrometer: ',   NaN,        'Take a spectrum via a shoddy windows-file-system-python-script-method.' },...
                                { 'push',   'Spectrum',        'spec',      'Push to take a spectrum.' },...
                                { 'title',  'PLE:  ',           NaN,        'Use the below to activate PLE scans.' },...
                                { 'edit',   'PLE Pixels (#): ', 240,        'The number of bins that are displayed. Note that (currently) 16 points are taken under every bin. The pump pixels are caclulated from the PLE and pump times.',    diff(galvoConfig.kind.int2extConv(galvoConfig.kind.intRange))},...
                                { 'edit',   'PLE Time (s): ',   10,         'The amount of time that the PLE scan should take.',                                [0 Inf]},...
                                { 'edit',   'Pump Time (s): ',  1,          'The repump time to restore the NV charge state.',                                  [0 Inf]},...
                                { 'edit',   'PLE Scans (#): ',  20,         'The number of scans that should be taken before stopping.',                        [1 Inf 1]},...
                                { 'edit',   'Freq Min (V): ',   0,          'The voltage controlling the laser frequency at the beginning of each PLE scan.',   [0 3]},...
                                { 'edit',   'Freq Max (V): ',   3,          'The voltage controlling the laser frequency at the end of each PLE scan.',         [0 3]},...
                                { 'push',   'PLE',              'ple',      'Push to active a scan with the above parameters.' },...
                              };
        end
    end
    
    methods
        function gui = mcgDiamond(varin)
            switch nargin
                case 0
                    gui.load();                             % Attempt to load a previous config from configs/computername/classname/config.mat
                    
                    if isempty(gui.config)                  % If the file did not exist or the loading failed...
                        gui.config = gui.defaultConfig();   % ...then use the defaultConfig() as a backup.
                    end
                case 1
                    gui.config = varin;
            end
            
            gui.buildGUI();
        end
        
        function Callbacks(gui, ~, ~, cbName)
            if ~isfield(gui.objects, 'isSetup')
                gui.setupObjects();
            end
            
            switch lower(cbName)
                case 'galvo'
                    data = mcData(mcData.squareScanConfig(  gui.objects.galvos(1),...
                                                            gui.objects.galvos(2),...
                                                            gui.objects.counter,...
                                                            gui.controls{1}.Value,...
                                                            gui.controls{3}.Value,...
                                                            gui.controls{2}.Value));
                    data.d
                                                                
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'piezo'
                    data = mcData(mcData.squareScanConfig(  gui.objects.piezos(1),...
                                                            gui.objects.piezos(2),...
                                                            gui.objects.counter,...
                                                            gui.controls{4}.Value,...
                                                            gui.controls{6}.Value,...
                                                            gui.controls{5}.Value));
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'optx'
                    data = mcData(mcData.optimizeConfig(    gui.objects.piezos(1),...
                                                            gui.objects.counter,...
                                                            gui.controls{7}.Value,...
                                                            gui.controls{9}.Value,...
                                                            gui.controls{10}.Value));
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'opty'
                    data = mcData(mcData.optimizeConfig(    gui.objects.piezos(2),...
                                                            gui.objects.counter,...
                                                            gui.controls{7}.Value,...
                                                            gui.controls{9}.Value,...
                                                            gui.controls{10}.Value));
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'optz'
                    data = mcData(mcData.optimizeConfig(    gui.objects.piezos(3),...
                                                            gui.objects.counter,...
                                                            gui.controls{8}.Value,...
                                                            gui.controls{9}.Value,...
                                                            gui.controls{10}.Value));
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'spec'
                    data = mcData(mcData.singleSpectrumConfig());
                    mcDataViewer(data, false);  % Open mcDataViewer to view this data, but do not open the control figure
                case 'ple'
                    % Setup the data config
                    d.axes = {mcAxis};  % This is the time axis
                    d.scans = {1:gui.controls{14}.Value};

                                        % mciPLE.PLEConfig(xMin, xMax, upPixels, upTime (s), downTime (s))
                    d.inputs = {mciPLE(   mciPLE.PLEConfig( gui.controls{15}.Value,...      % No error correction (e.g. check integer) because config should(?) catch it.
                                                            gui.controls{16}.Value,...
                                                            gui.controls{11}.Value,...
                                                            gui.controls{12}.Value,...
                                                            gui.controls{13}.Value))};
                    d.intTimes = NaN; 	% Don't care about integration time because this input has a set integration time

                    % Make the dataViewer and aquire
                    mcDataViewer(mcData(d));
                case 'open'
                    mcDataViewer.loadGUI_Callback(0,0);
                otherwise
                    if ischar(cbName)
                        disp([class(gui) '.Callbacks(s, e, cbName): No callback of name ' cbName '.']);
                    else
                        disp([class(gui) '.Callbacks(s, e, cbName): Did not understand cbName; not a string.']);
                    end
            end
        end
    end
    
    methods
        function setupObjects(gui)
            gui.objects.isSetup = true;
            
            configPiezoX = mcaDAQ.piezoConfig();    configPiezoX.name = 'Piezo X'; configPiezoX.chn = 'ao0';       % Customize all of the default configs...
            configPiezoY = mcaDAQ.piezoConfig();    configPiezoY.name = 'Piezo Y'; configPiezoY.chn = 'ao1';
            configPiezoZ = mcaDAQ.piezoZConfig();   configPiezoZ.name = 'Piezo Z'; configPiezoZ.chn = 'ao2';
            
            configGalvoX = mcaDAQ.galvoConfig();    configGalvoX.name = 'Galvo X'; configGalvoX.dev = 'cDAQ1Mod1'; configGalvoX.chn = 'ao0';
            configGalvoY = mcaDAQ.galvoConfig();    configGalvoY.name = 'Galvo Y'; configGalvoY.dev = 'cDAQ1Mod1'; configGalvoY.chn = 'ao1';
            
            configCounter= mciDAQ.counterConfig();
            
            gui.objects.piezos(1) = mcaDAQ(configPiezoX);
            gui.objects.piezos(2) = mcaDAQ(configPiezoY);
            gui.objects.piezos(3) = mcaDAQ(configPiezoZ);
            
            gui.objects.galvos(1) = mcaDAQ(configGalvoX);
            gui.objects.galvos(2) = mcaDAQ(configGalvoY);
            
            gui.objects.counter   = mciDAQ(configCounter);
        end
    end
end

