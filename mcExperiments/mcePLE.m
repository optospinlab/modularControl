classdef mcePLE < mcExperiment
% mcExperiment is a generalization of experimental procedures.
%
% To use:
%
%   e = mcePLE(config)
%   e.measure()
%
%
%
% Also see mcExperiment and mcInput.
    
    methods (Static)
        % Neccessary extra vars:
        %  - steps
        %  - results
        
        function config = defaultConfig()               % Static config that should be used if no configuration is provided upon intialization.
            config = mcExperiment.customConfig();
        end
        function config = customConfig(xMin, xMax, upPixels, upSpeed, downSpeed)
            config.class = 'mcePLE';
            
            config.name = 'PLE Experiment';             % ** Change this to the UI name for this identity of mci<MyNewInput>.

            config.kind.kind =          'ple';          % ** Change this to the programatic name that the program should use for this identity of mci<MyNewInput>.
            config.kind.name =          'PLE';          % ** Change this to the technical name (e.g. name of device) for this identity of mci<MyNewInput>.
            config.kind.intUnits =      'GHz';          % Outputs the FWHM of the PLE peak in GHz. Outputs NaN if no peak is found
            config.kind.shouldNormalize = false;        % (Not sure if this is functional.) If this variable is flagged, the measurement is subtracted from the previous and is divided by the time spent on a pixel. Not that this is done outside the measurement currently in mcData (individual calls to .measure() will not have this behavior currently)
            config.kind.sizeInput =     [1 1];          % Both the position of the peak and the FWHM of the peak are single numbers.
            
            
            % Spectrometer
            spectrometer =  mciSpectrum.pyWinSpecConfig();
            specData =      mcData.inputConfig(spectrometer);
            
            % Counter
            counter =       mcaDAQ.counterConfig();         counter.chn = 'ctr1';
            
            % Mirror for switching between SPCM and spectrometer.
            mirror =        mcaArduino.flipMirrorConfig();  mirror.port = 'COM8';
            
            % Serial red NFLaser controls
            redSerial =        mcaNFLaser.defaultConfig();
            
            % -3 -> 3 V red freq control
            redAnalog =     mcaDAQ.redConfig();
            
            % Green laser on/off
            greenDigital =  mcaDAQ.greenConfig();
            
            % PLE input
            inputPLE =      mciPLE.LEConfig(xMin, xMax, upPixels, upSpeed, downSpeed);
            scansPLE =      mcData.inputConfig(inputPLE);
            
            config.overview =   'Overview should be used to describe a mcExperiment.';
            
            config.s.names =    {   'Mirror Down',...
                                    'Spectrum',...
                                    'Laser On',...
                                    'Align Laser',...
                                    'Laser at -3V',...
                                    'Spectrum',...
                                    'Laser at +3V',...
                                    'Spectrum',...
                                    'Mirror Up',...
                                    'PLE',...
                                    'Laser Off'         };
                                
            config.s.tooltips = {   'Move the SPCM mirror down so that we can take a spectrum.',...
                                    'Take a spectrum so that we know where to align the red laser.',...
                                    'Turn the red laser on so we can use it.',...
                                    'Set the wavelength of the red laser to be on the ZPL.',...
                                    'Offset -3V from the basepoint so we can verify the scan will pass through the ZPL.',...
                                    'Take a spectrum at -3V.',...
                                    'Offset +3V from the basepoint so we can verify the scan will pass through the ZPL.',...
                                    'Take a spectrum at +3V.',...
                                    'Move the SPCM mirror up so that we can use the SPCM.',...
                                    'Turn the laser off.'                                                                   };
                                
            config.s.inputs =   {   0,...
                                    NaN,...
                                    'on()',...
                                    NaN,...             % Will calculate this value in analysis.
                                    -Inf,... 
                                    NaN,... 
                                    Inf,... 
                                    NaN,... 
                                    1,...
                                    NaN,...
                                    'off()'         };
                                
            config.s.configs =  {   mirror,...
                                    specData,...
                                    redSerial,...
                                    redSerial,...
                                    redAnalog,... 
                                    specData,... 
                                    redAnalog,... 
                                    specData,... 
                                    mirror,...
                                    scansPLE,...
                                    redSerial       };
                                
            config.s.data =       { NaN, NaN, NaN, NaN };   % Array containing the result of each step (for use later)
            config.current =    1;                          % Current step
            config.autoProDef = true;                       % Default value for the autoproceed checkbox.
            config.dname = '';                              % Name of directory to save to.
        end
    end
    
    methods
        function Step(e, ii)    % Proceed with the iith step of the experiment e. Overwrite this in mce subclasses.
%             switch ii
%                 case 0
%                     % Do something at the end of step 0.
%                 case 1
%                     % Do something at the end of step 1.
%                 %...
%             end
        end
    end
    
end

