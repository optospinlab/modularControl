classdef (Sealed) mcaHwpRotator < mcAxis
% Used to control the half-wave-plate rotator powered by an Adafruit
% MotorShield on an Arduino
%
% https://sharepoint.washington.edu/phys/research/optospinlab/Documents/AWPR%20final-2.pdf
%
% There are five (relevant) properties that are pre-defined in mcAxis that the user should be aware of:
%       a.config    % The config structure that should only be used to define the axis identity. *No* runtime information should be stored in config (e.g. serial session).
%       a.s         % This should be used for the persistant runtime axis session, whether serial, NIDAQ, or etc.
%       a.t         % An additional 'timer' session for unusual axes (see mcaMicro for use to poll the micros about the current position).
%       a.extra     % A (currently unused) cell array which should contain the names of the essential custom variables for the config (why isn't this in a.config?).
%       a.x         % Current position of the axis in the internal units of the 1D parameterspace.
%       a.xt        % Target position of the axis in the internal units of the 1D parameterspace. This is useful for 'slow' axes which do not immdiately reach the destination (e.g. micrometers) for 'fast' axes (e.g. piezos), a.x should always equal a.xt.
%
% Syntax:
%
% + Initialization:
%
%   a = mca<MyNewAxis>()                        % Open with default configuration.
%   a = mca<MyNewAxis>(config)                  % Open with configuration given by the struct 'config'.
%   a = mca<MyNewAxis>('config_file.mat')       % Open with config file in 'MATLAB_PATH\configs\axisconfigs\' (not entirely functional at the moment)
%
%   config = mca<MyNewAxis>.<myType>Config()    % Returns a static config struture for that type (e.g. use as the config struct above).
%   
% + Naming:
%
%   str =   a.name()                            % Returns the default name. This is currently nameShort().
%   str =   a.nameUnits()                       % Returns info about this axis in 'name (units)' form.
%   str =   a.nameShort()                       % Returns short info about this axis in a readable form.
%   str =   a.nameVerb()                        % Returns verbose info about this axis in a readable form.
%
% + Interaction:
%
%   tf =    a.open()                            % Opens a session of the axis (e.g. for the micrometers, a serial session); returns whether open or not.
%   tf =    a.close()                           % Closes the session of the axis; returns whether closed or not.
%
%   tf =    a.inRange(x)                        % Returns true if x is in the external range of a.
%
%   tf =    a.goto(x)                           % If x is in range, makes sure axis is open, moves axis to x, and returns success.
%
%   tf =    a.read()                            % Reads the current position of the axis, returns success. This is useful for 'slow' axes like micrometers where a.xt (the target position) does not match the real position.
%
%   x =     a.getX(x)                           % Returns the position of the axis (a.x) in external units.
%   x =     a.getXt(x)                          % Returns the target position of the axis (a.xt) in external units.
%
% Also see mcAxis.

    methods (Static)    % The folllowing static configs are used to define the identity of axis objects. configs can also be loaded from .mat files
        % Neccessary extra vars:
        %  - port
        
        function config = defaultConfig()                           % Static config that should be used if no configuration is provided upon intialization.
            config = mcaHwpRotator.customConfig();
        end
        function config = customConfig()                            % ** Use a descriptive name for this particular 'identity' of mca<MyNewAxis>.
            config.class =              'mcaHwpRotator';
            
            config.name =               [char(955) '/2 Plate'];     % UI name for this identity of mca<MyNewAxis>.

            config.kind.kind =          'hwpRotator';               % Programatic name that the program should use for this identity of mca<MyNewAxis>.
            config.kind.name =          'Adafruit Motor Shield';    % Technical name (e.g. name of device) for this identity of mca<MyNewAxis>.
            config.kind.intRange =      [0 200];                    % Change this to the range of the axis. This is in internal units (.extRange is generated by mcAxis). Use a cell array if the range is not continuous (e.g. on/off would be {0 1})
            config.kind.int2extConv =   @(x)(x .* 1.8);             % Conversion from 'internal' units to 'external'.
            config.kind.ext2intConv =   @(x)(round(x ./ 1.8));      % Conversion from 'external' units to 'internal' (inverse of above).
            config.kind.intUnits =      'steps';                    % Units used...     ...internally
            config.kind.extUnits =      'deg';                      %                   ...externally
            config.kind.base =          0;                          % The point (in external units) that the axis should seek at startup.
            
            config.keyStep =            1.8;                        % Speed or step-every-tick (in external units) that this axis should move with...     ...the keyboard and
            config.joyStep =            3.6;                        %                                                                                     ...the joystick  (these can be modified in the mcUserInput UI).
            
            config.port =               'COM7';
        end
    end
    
    methods             % Initialization method (this is what is called to make an axis object).
        function a = mcaHwpRotator(varin)
            a.extra = {'port'};
            if nargin == 0
                a.construct(a.defaultConfig());
            else
                a.construct(varin);
            end
            a = mcInstrumentHandler.register(a);
        end
    end
    
    % These methods overwrite the empty methods defined in mcAxis. These methods are used in the uncapitalized parent methods defined in mcAxis.
    methods
        % NAME ---------- The following functions define the names that the user should use for this axis.
        function str = NameShort(a)     % 'short' name, suitable for UIs/etc.
            str = [a.config.name ' (' a.config.port ')'];                                                     % ** Change these to your custom vars.
        end
        function str = NameVerb(a)      % 'verbose' name, suitable to explain the identity to future users.
            str = [a.config.name ' (a half wave plate rotator on port ' a.config.port ')'];   % ** Change these to your custom vars.
        end
        
        % EQ ------------- The function that should return true if the custom vars are the same (future: use a.extra for this?)
        function tf = Eq(a, b)          % Compares two mcaTemplates
            tf = strcmpi(a.config.port,  b.config.port);
        end
        
        % OPEN/CLOSE ---- The functions that define how the axis should init/deinitialize (these functions are not used in emulation mode).
        function Open(a)
            ard = arduino(a.config.port, 'uno', 'Libraries', 'Adafruit\MotorShieldV2');
            shield = addon(ard, 'Adafruit\MotorShieldV2');
            sm = stepper(shield, 2, 200, 'RPM', 10, 'stepType', 'double');
            zero = 0;                   % Number of steps to reach zero angle after contact with optical interrupter
            
            pause(.5);
            
            % Gives power to the LED in the optical interrupter
            writeDigitalPin(ard, 'D13', 1);
            digiRead = readDigitalPin(ard, 'D11');
            
            % If the interrupter flag is in the beam motor moves and checks again.
            if digiRead == 0
                move(sm, -10);
                writeDigitalPin(ard, 'D13', 1);
                digiRead = readDigitalPin(ard, 'D11');
            end
            
            % Moves the motor until the interrupter flag blocks the beam.
            i = 0;
            cont = 1;
            while digiRead && cont
                move(sm, 1);
                digiRead = readDigitalPin(ard, 'D11');
                i = i + 1;
                if i > 415                   % Allows a way to exit program if motor can't find zero.
                    display('Hwp rotator unable to find zero.');
                    prompt = input('Continue without zeroing? (y/n) ','s');
                    if prompt == 'y' || prompt == 'Y'
                        cont = 0;
                    else
                        i = 0;
                    end
                end
            end
            
            % Moves motor to the 0 angle position.
            move(sm, zero);
            writeDigitalPin(ard, 'D13', 0);
            
            a.s = sm;
        end
        function Close(a)               % Do whatever neccessary to deinitialize the axis.
            a.s = 0;                  % ** Change this to the custom code which closes the axis.
        end
        
        % READ ---------- For 'slow' axes that take a while to reach the target position (a.xt), define a way to determine the actual position (a.x). These do *not* have to be defined for 'fast' axes.
        function ReadEmulation(a)       
            a.x = a.xt;         % ** In emulation, just assume the axis is 'fast'?
        end
        function Read(a)
            a.x = a.xt;    % ** Change this to the code to get the actual postition of the axis.
        end
        
        % GOTO ---------- The 'meat' of the axis: the funtion that translates the user's intended movements to reality.
        function GotoEmulation(a, x)
            a.xt = a.config.kind.ext2intConv(x);    % ** Usually, behavior should not deviate from this default a.GotoEmulation(x) function. Change this if more complex behavior is desired.
            a.x = a.xt;
        end
        function Goto(a, x)
            a.xt = a.config.kind.ext2intConv(x);    % Set the target position a.xt (in internal units) to the user's desired x (in internal units).
            dist = a.xt - a.x;
            move(a.s, dist);
            pause(dist/(200 * 3));                  % Waits until motor is finished rotating
            
            a.x = a.xt;                             % If this axis is 'fast' and immediately advances to the target (e.g. peizos), then set a.x.
%             move(a.sm, a.x)                          % ** Change this to be the code that actually moves the axis (also change the above if different behavior is desired).
                                                    % Also note that all 'isInRange' error checking is done in the parent mcAxis.
        end
    end
end




